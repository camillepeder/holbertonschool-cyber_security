require 'socket'
require 'msf/core'

class MetasploitModule < Msf::Auxiliary

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name'        => 'Custom Port Scanner',
        'Description' => 'Scans a range of ports',
        'License'     => 'MSF_LISENCE'
      )
    )

    register_options(
      [
        Opt::RHOST,
        OptInt.new('STARTPORT', [true, 'minimum range', 1]),
        OptInt.new('ENDPORT', [true, 'maximum range', 65535])
      ]
    )
  end

  def run
    print_status("Running module against #{datastore['RHSOT']}")

    def scan_port( port)
      begin
        socket = TCPSocket.new(datastore['RHOST'], port)
        socket.close
        status = 'open'
      rescue Errno::ECONNREFUSED, Errno::ETIMEDOUT
        status = 'closed'
      end
      return status
    end

    open_ports = []
    (datastore['STARTPORT']..datastore['ENDPORT']).each do |current_port|
      scan = scan_port(current_port)
      if scan == 'open'
        print_good("Port #{current_port} is open on #{datastore['RHOST']}")
        open_ports << current_port
      end
    end

    if open_ports.length > 0
      print_status("Open ports at #{datastore['RHOST']}: #{open_ports.join(',')}")
    end
  end
end
